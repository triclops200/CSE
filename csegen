#!/usr/bin/env ruby 

# Copyright 2012 Bryan Hoyle
# This file is part of C++ Server Pages
#
#    C++ Server Pages is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    C++ Server Pages is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with C++ Server Pages.  If not, see <http://www.gnu.org/licenses/>.
 


require "fileutils"
@tmpdir = "/tmp/csedir"
def old?(finame)
	if File.exists?(@tmpdir+finame+".md5")
		File.open(@tmpdir+finame+".md5") do |filehand|
			v= filehand.read
			vv= `stat -c %Z #{finame}`
			return v != vv
		end
	else
		FileUtils.mkdir_p(@tmpdir+File.dirname(finame))
		return true
	end
end
def openfile_p fname,mode
	FileUtils.mkdir_p(@tmpdir+File.dirname(fname))
	return File.open(@tmpdir+fname,mode)
end
gen = false
if old?(ARGV[0])
	gen = true
end
gen = true
headers = ""
if gen
	headers = "
#include <iostream>
#include <string>
#include <map>
#include <fstream>
#include <cstdlib>
using namespace std;
string VERSION = \"0.5.1\";

map<string,string> resolveKeys(char* KeyString) {
	int P = 0;
	map<string,string> KeyMap;
	string Key = \"\";
	string Value = \"\";
	bool Mode = 1; // 0 = key, 1 = value
	while(KeyString[P]) {
		switch(KeyString[P]) {
		case '&':
			KeyMap[Key] = Value;
			Key = \"\";
			Value = \"\";
			Mode = 1;
			break;
		case '=':
			Mode = 0;
			break;
		default:
			if(Mode)
				Key += KeyString[P];
			else
				Value += KeyString[P];
		break;
		}
		P++;
	}
	KeyMap[Key] = Value;
	return KeyMap;
}
string execDir=\"#{File.dirname(ARGV[0])}\";
	"
end
source = ""
source += "int call(map<string,string> Request){"
fname =  ARGV[0]
contents = File.open(fname,"rb").read
sections = contents.split("<%");
msections = []
sections.each do |o|
	o.split("%>").each do |s|
		msections << s;
	end
end
i=1
if contents.strip[0..1] == "<%"
	i=-1
end
firsttype = i;
cppsections = []
htmlsections = []
msections.each do |s|
	if i == -1
		cppsections << s
	else
		htmlsections << s
	end
	i*=-1
end
i = firsttype;
v = 1
c = 0
xfiles=[]
msections.each do
	begin
		if i == -1
			val = ""
			if cppsections[c][0]=='=' && gen
				val = "cout<<"+cppsections[c][1..-1]+";\n"
			elsif cppsections[c][0]=='@'
				cppsections[c][1..-1].strip.gsub(" ","").gsub("\n","").gsub("	","").split(",").each do |tem|
					xfiles << tem
				end
			elsif gen
				val = cppsections[c]
			end
			source += val
		else 
			source += "cout<<\"" +htmlsections[c].gsub("\"","\\\"").gsub("\n","\\n")+"\";\n";
		end
		if v == 2
			v = 0
			c+=1
		end
		v+=1
	rescue
	end
	i *= -1
end	
if gen
	source += "}

int main(int argc, char**argv){
	if(argc==2)
	call(resolveKeys(argv[1]));	
	else
	call(resolveKeys(\"\"));
}

	"
end
uheaders = "//user includes\n" 
xfiles.uniq!
if xfiles!= [] 
	xfiles.each do |te|
		if File.extname(te) == ".h" || File.extname(te) == ".hpp"
			uheaders += "#include \"#{te}\"\n"
		end
	end
end
uheaders += "//end user includes \n\n"
headers = uheaders + headers
source = headers + source
wd = (File.dirname(ARGV[0]));
if xfiles != []
	FileUtils.cd(wd)
	FileUtils.cp(xfiles,@tmpdir+wd)
end
xfiles.each do |fnm|
	if fnm!=""
		if old?(wd + "/"+fnm)
			gen=true
		end
	end
end
if gen
	f=openfile_p(ARGV[0]+".cpp","w")
	f.puts(source)
	f.close
	f=openfile_p(ARGV[0]+".dep","w")
	xfiles.each do |fnm|
		f.print(wd+"/"+fnm+",")
	end
	f.print "\n"
	f.close
end
cfiles = []
xfiles.each do |fn|
	if !(fn[-2..-1]==".h" || fn[-4..-1] == ".hpp")
		cfiles << fn
	end
end
if gen
	errmsg = `g++ -O2 #{@tmpdir+ARGV[0]+".cpp"} -I#{@tmpdir+wd} #{cfiles.join" "} -o #{@tmpdir+ARGV[0]+".e"} 2>&1` 
end
if $? == 0
	`stat -c %Z #{ARGV[0]} > #{@tmpdir + ARGV[0]+".md5"}`
	xfiles.each do |tfn|
		`stat -c %Z #{wd+"/"+tfn} > #{@tmpdir + wd +"/"+ tfn+".md5"}`
	end
	puts `#{@tmpdir+ARGV[0]+".e"} #{ARGV[1]}`
else
	puts "g++ -O2 #{@tmpdir+ARGV[0]+".cpp"} -I#{@tmpdir+wd} #{cfiles.join" "} -o #{@tmpdir+ARGV[0]+".e"} 2>&1"
	puts "#{errmsg}"
end

